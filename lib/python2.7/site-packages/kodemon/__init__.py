import json
import socket
import logging
import inspect
import time
import os
from functools import wraps

logger = logging.getLogger('kodemon')


def send_message(message):
    host = os.environ.get('KODEMON_HOST', 'localhost')
    try:
        port = int(os.environ.get('KODEMON_PORT', 4000))
    except:
        port = 4000
    token = os.environ.get('KODEMON_TOKEN', 'test-token')

    message['token'] = token
    data = json.dumps(message)

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.sendto(data, (host, port))

    except socket.error as e:
        logger.error('Error occurred when sending '
                     'message to kodemon: ' + e.message)


def kodemon(*setting_args, **setting_kwargs):
    no_args = False
    if len(setting_args) == 1 and not setting_kwargs\
            and callable(setting_args[0]):
        func = setting_args[0]
        no_args = True

    def outer(func):
        @wraps(func)
        def with_kodemon(*args, **kwargs):
            function_call_timestamp = int(time.time())
            function_path = inspect.getmodule(func).__file__
            function_name = func.__name__
            key = '{0}-{1}'.format(function_path, function_name)
            function_start_time = time.time()
            return_value = func(*args, **kwargs)
            value = (time.time() - function_start_time) * 1000.0

            message = {'key': key, 'execution_time': value,
                       'timestamp': function_call_timestamp}
            message.update(setting_kwargs)
            send_message(message)

            return return_value
        return with_kodemon

    if no_args:
        return outer(func)
    else:
        return outer
